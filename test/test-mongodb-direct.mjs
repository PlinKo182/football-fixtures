// Definir vari√°vel ANTES dos imports
process.env.MONGODB_URI = 'mongodb+srv://jrplinko_db_user:73QXo1wsiFfHS2po@cluster0.tkqxcs2.mongodb.net/Empates?retryWrites=true&w=majority&appName=Cluster0';

// Teste directo da migra√ß√£o via MongoDB (sem HTTP)
import connectToDatabase from '../lib/mongodb.js';
import Game from '../models/Game.js';
import HistoricalGame from '../models/HistoricalGame.js';

async function testMigrationDirect() {
  console.log('üß™ TESTE DIRECTO DA MIGRA√á√ÉO - MONGODB');
  console.log('‚ïê'.repeat(50));
  
  try {
    // Conectar √† base de dados
    console.log('üîå Conectando √† MongoDB...');
    await connectToDatabase();
    console.log('‚úÖ Conectado com sucesso');
    
    // 1. Buscar jogos candidatos (com resultado)
    console.log('\n1Ô∏è‚É£ BUSCANDO CANDIDATOS...');
    const candidatos = await Game.find({
      $and: [
        { homeScore: { $exists: true, $ne: null } },
        { awayScore: { $exists: true, $ne: null } }
      ]
    }).limit(5).sort({ date: -1 });
    
    console.log(`‚úÖ Encontrados ${candidatos.length} jogos com resultado:`);
    
    candidatos.forEach((game, index) => {
      const date = new Date(game.date).toLocaleDateString('pt-PT');
      console.log(`${index + 1}. ${game.homeTeam} vs ${game.awayTeam}`);
      console.log(`   üìÖ ${date}`);
      console.log(`   ‚öΩ ${game.homeScore}-${game.awayScore}`);
      console.log(`   üèÜ ${game.league}`);
      console.log(`   üéØ CustomOdds: ${game.customOdds?.draw || 'Nenhuma'}`);
      console.log(`   üÜî ${game._id}`);
      console.log('‚îÄ'.repeat(30));
    });
    
    if (candidatos.length === 0) {
      console.log('‚ö†Ô∏è  Nenhum jogo com resultado encontrado');
      return;
    }
    
    // 2. Testar migra√ß√£o do primeiro jogo
    const firstGame = candidatos[0];
    console.log(`\n2Ô∏è‚É£ TESTANDO MIGRA√á√ÉO: ${firstGame.homeTeam} vs ${firstGame.awayTeam}`);
    
    // Verificar se j√° existe na base hist√≥rica
    const existingHistorical = await HistoricalGame.findOne({
      homeTeam: firstGame.homeTeam,
      awayTeam: firstGame.awayTeam,
      date: firstGame.date
    });
    
    if (existingHistorical) {
      console.log('‚ö†Ô∏è  Jogo j√° existe na base hist√≥rica!');
      console.log(`   üÜî ID hist√≥rico: ${existingHistorical._id}`);
      console.log(`   üéØ TeamOdds: ${JSON.stringify(Object.fromEntries(existingHistorical.teamOdds))}`);
      return;
    }
    
    // 3. Simular cria√ß√£o do registo hist√≥rico
    console.log('üß™ SIMULANDO CRIA√á√ÉO...');
    
    const season = HistoricalGame.calculateSeason(firstGame.date);
    console.log(`üìÖ Season calculada: ${season}`);
    
    // Preparar teamOdds
    const teamOdds = new Map();
    const oddsValue = firstGame.customOdds?.draw || 3.0;
    teamOdds.set(firstGame.homeTeam, { draw: oddsValue });
    teamOdds.set(firstGame.awayTeam, { draw: oddsValue });
    
    const historicalData = {
      league: firstGame.league,
      homeTeam: firstGame.homeTeam,
      awayTeam: firstGame.awayTeam,
      date: firstGame.date,
      time: firstGame.time,
      homeScore: firstGame.homeScore,
      awayScore: firstGame.awayScore,
      status: 'finished',
      season: season,
      originalGameId: firstGame._id.toString(),
      sportRadarId: firstGame.sportRadarId,
      teamOdds: teamOdds
    };
    
    console.log('\nüìä DADOS QUE SERIAM CRIADOS:');
    console.log(`   Teams: ${historicalData.homeTeam} vs ${historicalData.awayTeam}`);
    console.log(`   Score: ${historicalData.homeScore}-${historicalData.awayScore}`);
    console.log(`   League: ${historicalData.league}`);
    console.log(`   Season: ${historicalData.season}`);
    console.log(`   TeamOdds: ${JSON.stringify(Object.fromEntries(teamOdds))}`);
    
    // 4. CRIAR REALMENTE (descomenta se quiseres testar a cria√ß√£o real)
    console.log('\nü§î Criar registo hist√≥rico real? (descomentado se necess√°rio)');
    /*
    const historicalGame = await HistoricalGame.create(historicalData);
    console.log('‚úÖ CRIADO COM SUCESSO!');
    console.log(`   üÜî ID hist√≥rico: ${historicalGame._id}`);
    */
    
    console.log('\nüéØ TESTE CONCLU√çDO - ESTRUTURA VALIDADA!');
    
  } catch (error) {
    console.error('‚ùå ERRO:', error.message);
    console.error('Stack:', error.stack);
  } finally {
    process.exit(0);
  }
}

// Executar teste
testMigrationDirect();