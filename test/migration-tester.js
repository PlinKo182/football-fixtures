/**
 * UTILIT√ÅRIO DE TESTE - Migra√ß√£o de Jogos
 * 
 * Este ficheiro permite testar a migra√ß√£o sem afetar GameCard ou page.js
 * Use com cuidado! Sempre teste primeiro com testMode=true
 */

const API_BASE = process.env.NODE_ENV === 'production' 
  ? 'https://your-app.vercel.app' 
  : 'http://localhost:3000';

class MigrationTester {
  
  /**
   * Lista jogos candidatos √† migra√ß√£o
   */
  static async listCandidates() {
    try {
      const response = await fetch(`${API_BASE}/api/migrate-game`);
      const data = await response.json();
      
      console.log('üîç CANDIDATOS √Ä MIGRA√á√ÉO:');
      console.log('‚ïê'.repeat(50));
      
      if (data.candidates && data.candidates.length > 0) {
        data.candidates.forEach((game, index) => {
          console.log(`${index + 1}. ${game.homeTeam} vs ${game.awayTeam}`);
          console.log(`   üìÖ ${new Date(game.date).toLocaleDateString('pt-PT')}`);
          console.log(`   ‚öΩ Resultado: ${game.score}`);
          console.log(`   üéØ Odds personalizadas: ${game.hasCustomOdds ? `${game.customOdds}` : 'N√£o'}`);
          console.log(`   üÜî ID: ${game._id}`);
          console.log('‚îÄ'.repeat(30));
        });
      } else {
        console.log('‚ùå Nenhum jogo candidato encontrado');
      }
      
      return data;
    } catch (error) {
      console.error('‚ùå Erro ao listar candidatos:', error);
      return null;
    }
  }
  
  /**
   * Testa migra√ß√£o de um jogo (sem salvar)
   */
  static async testMigration(gameId) {
    try {
      console.log(`üß™ TESTANDO MIGRA√á√ÉO: ${gameId}`);
      console.log('‚ïê'.repeat(50));
      
      const response = await fetch(`${API_BASE}/api/migrate-game`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          gameId, 
          testMode: true 
        })
      });
      
      const data = await response.json();
      
      if (response.ok) {
        console.log('‚úÖ SIMULA√á√ÉO CONCLU√çDA');
        console.log('Original:', {
          teams: `${data.originalGame.homeTeam} vs ${data.originalGame.awayTeam}`,
          date: new Date(data.originalGame.date).toLocaleDateString('pt-PT'),
          score: `${data.originalGame.homeScore}-${data.originalGame.awayScore}`,
          customOdds: data.originalGame.customOdds?.draw
        });
        console.log('Seria criado:', {
          season: data.wouldCreate.season,
          odds: data.teamOddsPreview
        });
      } else {
        console.log('‚ùå ERRO:', data.error);
      }
      
      return data;
    } catch (error) {
      console.error('‚ùå Erro no teste:', error);
      return null;
    }
  }
  
  /**
   * Executa migra√ß√£o real (CUIDADO!)
   */
  static async executeMigration(gameId) {
    console.log(`‚ö†Ô∏è  MIGRA√á√ÉO REAL: ${gameId}`);
    console.log('‚ïê'.repeat(50));
    console.log('üö® ISTO VAI ALTERAR A BASE DE DADOS!');
    
    try {
      const response = await fetch(`${API_BASE}/api/migrate-game`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          gameId, 
          testMode: false 
        })
      });
      
      const data = await response.json();
      
      if (response.ok) {
        console.log('‚úÖ MIGRA√á√ÉO CONCLU√çDA');
        console.log('Jogo hist√≥rico criado:', data.historicalGame._id);
      } else {
        console.log('‚ùå ERRO:', data.error);
      }
      
      return data;
    } catch (error) {
      console.error('‚ùå Erro na migra√ß√£o:', error);
      return null;
    }
  }
}

// Para usar em Node.js ou browser console
if (typeof module !== 'undefined' && module.exports) {
  module.exports = MigrationTester;
}

// Para usar no browser
if (typeof window !== 'undefined') {
  window.MigrationTester = MigrationTester;
}

/*
COMO USAR:

1. No browser console (F12):
   await MigrationTester.listCandidates();
   await MigrationTester.testMigration('GAME_ID_AQUI');
   
2. Linha de comandos:
   node -e "
   const MigrationTester = require('./test/migration-tester.js');
   MigrationTester.listCandidates().then(console.log);
   "
*/