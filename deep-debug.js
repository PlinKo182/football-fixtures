import dotenv from 'dotenv';
dotenv.config({ path: '.env.local' });

import mongoose from 'mongoose';

async function deepDebugConnection() {
  console.log('üïµÔ∏è INVESTIGA√á√ÉO PROFUNDA DA CONEX√ÉO...\n');
  
  try {
    const uri = process.env.MONGODB_URI;
    console.log('üîç AN√ÅLISE DA URI:');
    console.log(`   URI completa: ${uri}`);
    console.log(`   Database extra√≠da: ${uri.split('/')[3]?.split('?')[0]}`);
    console.log('');
    
    console.log('üîó CONECTANDO E DEBUGANDO...');
    await mongoose.connect(uri, {
      bufferCommands: false,
    });
    
    console.log('   ‚úÖ Conex√£o estabelecida');
    console.log(`   üìä Database Name: ${mongoose.connection.db.databaseName}`);
    console.log(`   üìä Connection State: ${mongoose.connection.readyState}`);
    console.log(`   üìä Host: ${mongoose.connection.host}`);
    console.log(`   üìä Port: ${mongoose.connection.port}`);
    console.log('');
    
    // Testar cria√ß√£o de modelo direto
    console.log('üß™ TESTANDO CRIA√á√ÉO DIRETA DE MODELO...');
    
    const TestSchema = new mongoose.Schema({
      testName: String,
      timestamp: { type: Date, default: Date.now }
    });
    
    // For√ßa especificar a cole√ß√£o explicitamente
    const TestModel = mongoose.model('debugtest', TestSchema, 'debugtest');
    
    const testDoc = await TestModel.create({
      testName: 'Debug Test ' + Date.now()
    });
    
    console.log(`   ‚úÖ Documento criado: ${testDoc._id}`);
    
    // Verificar onde foi salvo
    console.log('\nüîç VERIFICANDO ONDE FOI SALVO...');
    console.log(`   Database atual: ${mongoose.connection.db.databaseName}`);
    
    const collections = await mongoose.connection.db.listCollections().toArray();
    console.log('   Cole√ß√µes na base atual:');
    collections.forEach(col => {
      console.log(`      - ${col.name}`);
    });
    
    // Verificar tamb√©m na base test
    console.log('\nüîç VERIFICANDO SE VAZOU PARA A BASE TEST...');
    const testDbConnection = mongoose.connection.client.db('test');
    const testCollections = await testDbConnection.listCollections().toArray();
    
    if (testCollections.length === 0) {
      console.log('   ‚úÖ Base TEST est√° vazia');
    } else {
      console.log('   ‚ö†Ô∏è  Base TEST cont√©m:');
      for (const col of testCollections) {
        const count = await testDbConnection.collection(col.name).countDocuments();
        console.log(`      - ${col.name}: ${count} docs`);
      }
    }
    
    // Limpar teste
    await TestModel.findByIdAndDelete(testDoc._id);
    await mongoose.connection.db.dropCollection('debugtest');
    console.log('\nüßπ Teste limpo');
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
    console.error('Stack:', error.stack);
  } finally {
    await mongoose.disconnect();
  }
}

deepDebugConnection();